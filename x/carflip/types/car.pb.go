// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carflip/carflip/car.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Car struct {
	Id      uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Number  int32      `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	Price   types.Coin `protobuf:"bytes,4,opt,name=price,proto3" json:"price"`
	Creator string     `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Car) Reset()         { *m = Car{} }
func (m *Car) String() string { return proto.CompactTextString(m) }
func (*Car) ProtoMessage()    {}
func (*Car) Descriptor() ([]byte, []int) {
	return fileDescriptor_3141d7b426e1ee62, []int{0}
}
func (m *Car) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Car) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Car.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Car) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Car.Merge(m, src)
}
func (m *Car) XXX_Size() int {
	return m.Size()
}
func (m *Car) XXX_DiscardUnknown() {
	xxx_messageInfo_Car.DiscardUnknown(m)
}

var xxx_messageInfo_Car proto.InternalMessageInfo

func (m *Car) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Car) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Car) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Car) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

func (m *Car) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Car)(nil), "carflip.carflip.Car")
}

func init() { proto.RegisterFile("carflip/carflip/car.proto", fileDescriptor_3141d7b426e1ee62) }

var fileDescriptor_3141d7b426e1ee62 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x4a, 0xc4, 0x30,
	0x18, 0x85, 0xfb, 0x77, 0xda, 0x11, 0x23, 0x28, 0x04, 0xd1, 0xcc, 0x2c, 0x62, 0x71, 0xd5, 0x55,
	0x42, 0x15, 0x2f, 0x30, 0x73, 0x83, 0x2e, 0xdd, 0xa5, 0x99, 0x38, 0x04, 0x6c, 0xff, 0x92, 0x56,
	0xd1, 0x5b, 0x88, 0xa7, 0x9a, 0xe5, 0x2c, 0x5d, 0x89, 0xb4, 0x17, 0x91, 0x69, 0x32, 0xe2, 0xea,
	0x7f, 0x2f, 0xef, 0xc1, 0x47, 0x1e, 0x59, 0x68, 0xe5, 0x9e, 0x9e, 0x6d, 0x2b, 0xff, 0x5d, 0xd1,
	0x3a, 0xec, 0x91, 0x5e, 0x84, 0x27, 0x11, 0xee, 0xf2, 0x72, 0x8b, 0x5b, 0x9c, 0x32, 0x79, 0x50,
	0xbe, 0xb6, 0xe4, 0x1a, 0xbb, 0x1a, 0x3b, 0x59, 0xa9, 0xce, 0xc8, 0xd7, 0xa2, 0x32, 0xbd, 0x2a,
	0xa4, 0x46, 0xdb, 0xf8, 0xfc, 0xf6, 0x13, 0xc8, 0x6c, 0xad, 0x1c, 0x3d, 0x27, 0xb1, 0xdd, 0x30,
	0xc8, 0x20, 0x4f, 0xca, 0xd8, 0x6e, 0x28, 0x25, 0x49, 0xa3, 0x6a, 0xc3, 0xe2, 0x0c, 0xf2, 0xd3,
	0x72, 0xd2, 0xf4, 0x8a, 0xcc, 0x9b, 0x97, 0xba, 0x32, 0x8e, 0xcd, 0x32, 0xc8, 0xd3, 0x32, 0x38,
	0xfa, 0x40, 0xd2, 0xd6, 0x59, 0x6d, 0x58, 0x92, 0x41, 0x7e, 0x76, 0xb7, 0x10, 0x9e, 0x29, 0x0e,
	0x4c, 0x11, 0x98, 0x62, 0x8d, 0xb6, 0x59, 0x25, 0xbb, 0xef, 0x9b, 0xa8, 0xf4, 0x6d, 0xca, 0xc8,
	0x89, 0x76, 0x46, 0xf5, 0xe8, 0x58, 0x3a, 0x51, 0x8e, 0x76, 0x55, 0xec, 0x06, 0x0e, 0xfb, 0x81,
	0xc3, 0xcf, 0xc0, 0xe1, 0x63, 0xe4, 0xd1, 0x7e, 0xe4, 0xd1, 0xd7, 0xc8, 0xa3, 0xc7, 0xeb, 0xe3,
	0x10, 0x6f, 0x7f, 0x93, 0xf4, 0xef, 0xad, 0xe9, 0xaa, 0xf9, 0xf4, 0x9d, 0xfb, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xe4, 0x9a, 0x14, 0x4c, 0x32, 0x01, 0x00, 0x00,
}

func (m *Car) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Car) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Car) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCar(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCar(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Number != 0 {
		i = encodeVarintCar(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCar(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCar(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCar(dAtA []byte, offset int, v uint64) int {
	offset -= sovCar(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Car) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCar(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCar(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovCar(uint64(m.Number))
	}
	l = m.Price.Size()
	n += 1 + l + sovCar(uint64(l))
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCar(uint64(l))
	}
	return n
}

func sovCar(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCar(x uint64) (n int) {
	return sovCar(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Car) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Car: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Car: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCar(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCar
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCar
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCar
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCar
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCar        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCar          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCar = fmt.Errorf("proto: unexpected end of group")
)
